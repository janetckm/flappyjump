# set obstacle
OBSTACLE_WIDTH = 70
#height of top obstacle
OBSTACLE_HEIGHT = random.randint(150,450)
OBSTACLE_COLOR = (211, 253, 117)
OBSTACLE_X_CHANGE = -4
#start obstacle from the width of the SCREEN
obstacle_x = 500

#define function to display obstacle
def display_obstacle(height):
    # draw from the position (x, y) with size (width, height)
    pygame.draw.rect(SCREEN, OBSTACLE_COLOR, (obstacle_x, 0, OBSTACLE_WIDTH, height))
    bottom_obstacle_height = 535 - height - 150
    pygame.draw.rect(SCREEN, OBSTACLE_COLOR, (obstacle_x, 635, OBSTACLE_WIDTH, -bottom_obstacle_height))
#obstacle end

#Define function: detect collision
def collision_detection (obstacle_x, obstacle_height, bird_y, bottom_obstacle_height):
    if obstacle_x >= 50 and obstacle_x <= (50 + 64):
        if bird_y <= obstacle_height or bird_y >= (bottom_obstacle_height - 64):
            return True
    return False
#end define function: detect collision

#move obstacle
  obstacle_x += OBSTACLE_X_CHANGE
  if obstacle_x <= -10:
        obstacle_x = 500
        OBSTACLE_HEIGHT = random.randint(200, 400)

#display obstacle
display_obstacle(OBSTACLE_HEIGHT)
  
#use the function to detact collisoion 
collision = collision_detection(obstacle_x, OBSTACLE_HEIGHT, bird_y, OBSTACLE_HEIGHT + 150)
  
#if collision detection is TRUE, quit game
if collision:
    pygame.quit()
This paste expires in <1 hour. Public IP access. Share whatever you see with others in seconds with Context.Terms of ServiceReport this
